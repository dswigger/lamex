// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "lameencoderx.h"

/////////////////////////////////////////////////////////////////////////////
// CLameEncoderX

IMPLEMENT_DYNCREATE(CLameEncoderX, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLameEncoderX properties

CString CLameEncoderX::GetInputFile()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetInputFile(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

CString CLameEncoderX::GetOutputFile()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetOutputFile(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

long CLameEncoderX::GetEncodingPriority()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetEncodingPriority(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CLameEncoderX::GetMode()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetMode(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CLameEncoderX::GetBitrate()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetBitrate(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

float CLameEncoderX::GetSamplingFreq()
{
	float result;
	GetProperty(0x6, VT_R4, (void*)&result);
	return result;
}

void CLameEncoderX::SetSamplingFreq(float propVal)
{
	SetProperty(0x6, VT_R4, propVal);
}

BOOL CLameEncoderX::GetVoiceMode()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetVoiceMode(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetUseVBR()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetUseVBR(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

long CLameEncoderX::GetVBRQuality()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetVBRQuality(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CLameEncoderX::GetMinimumBitrate()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetMinimumBitrate(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

long CLameEncoderX::GetMaximumBitrate()
{
	long result;
	GetProperty(0xb, VT_I4, (void*)&result);
	return result;
}

void CLameEncoderX::SetMaximumBitrate(long propVal)
{
	SetProperty(0xb, VT_I4, propVal);
}

BOOL CLameEncoderX::GetDisableVBRInfoTag()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetDisableVBRInfoTag(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetUseQualityImprovements()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetUseQualityImprovements(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetUseFastMode()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetUseFastMode(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetDisableSFBCutoff()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetDisableSFBCutoff(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetAllowChanDifBlockTypes()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetAllowChanDifBlockTypes(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetOnlyATHForMasking()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetOnlyATHForMasking(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetNoShortBlocks()
{
	BOOL result;
	GetProperty(0x12, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetNoShortBlocks(BOOL propVal)
{
	SetProperty(0x12, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetInputIsRawPCM()
{
	BOOL result;
	GetProperty(0x13, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetInputIsRawPCM(BOOL propVal)
{
	SetProperty(0x13, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetForceByteSwab()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetForceByteSwab(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetDownmixToMono()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetDownmixToMono(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetErrorProtection()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetErrorProtection(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetMarkAsCopyrighted()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetMarkAsCopyrighted(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

BOOL CLameEncoderX::GetMarkAsNonOriginal()
{
	BOOL result;
	GetProperty(0x18, VT_BOOL, (void*)&result);
	return result;
}

void CLameEncoderX::SetMarkAsNonOriginal(BOOL propVal)
{
	SetProperty(0x18, VT_BOOL, propVal);
}

CString CLameEncoderX::GetTitle()
{
	CString result;
	GetProperty(0x19, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetTitle(LPCTSTR propVal)
{
	SetProperty(0x19, VT_BSTR, propVal);
}

CString CLameEncoderX::GetArtist()
{
	CString result;
	GetProperty(0x1a, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetArtist(LPCTSTR propVal)
{
	SetProperty(0x1a, VT_BSTR, propVal);
}

CString CLameEncoderX::GetAlbum()
{
	CString result;
	GetProperty(0x1b, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetAlbum(LPCTSTR propVal)
{
	SetProperty(0x1b, VT_BSTR, propVal);
}

CString CLameEncoderX::GetYear()
{
	CString result;
	GetProperty(0x1c, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetYear(LPCTSTR propVal)
{
	SetProperty(0x1c, VT_BSTR, propVal);
}

CString CLameEncoderX::GetComment()
{
	CString result;
	GetProperty(0x1d, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetComment(LPCTSTR propVal)
{
	SetProperty(0x1d, VT_BSTR, propVal);
}

CString CLameEncoderX::GetGenre()
{
	CString result;
	GetProperty(0x1e, VT_BSTR, (void*)&result);
	return result;
}

void CLameEncoderX::SetGenre(LPCTSTR propVal)
{
	SetProperty(0x1e, VT_BSTR, propVal);
}

float CLameEncoderX::GetResampleFreq()
{
	float result;
	GetProperty(0x1f, VT_R4, (void*)&result);
	return result;
}

void CLameEncoderX::SetResampleFreq(float propVal)
{
	SetProperty(0x1f, VT_R4, propVal);
}

float CLameEncoderX::GetEnoderXVersion()
{
	float result;
	GetProperty(0x20, VT_R4, (void*)&result);
	return result;
}

void CLameEncoderX::SetEnoderXVersion(float propVal)
{
	SetProperty(0x20, VT_R4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CLameEncoderX operations

BOOL CLameEncoderX::StartEncode()
{
	BOOL result;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CLameEncoderX::GetCurrentCommandString()
{
	CString result;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CLameEncoderX::SetAllDefaultParams()
{
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CLameEncoderX::GetTotalEncodingTime()
{
	CString result;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CLameEncoderX::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
